{"version":3,"sources":["components/LoadingIcon/LoadingIcon.js","components/Card/Card.js","App.js","serviceWorker.js","index.js"],"names":["LoadingIcon","props","className","Card","number","href","url","title","by","App","useState","articles","setArticles","isLoading","setIsLoading","fetchData","a","itemBaseUrl","fetch","topStoriesResponse","json","topStoriesData","slice","map","storyID","Promise","all","responses","response","data","useEffect","then","setTimeout","style","opacity","length","article","i","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+TAaeA,MAVf,SAAqBC,GACnB,OACE,yBAAKC,UAAU,0BACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,mB,MCaNC,MAhBf,SAAcF,GACZ,OACE,wBAAIC,UAAU,QACZ,yBAAKA,UAAU,qBAAoB,0BAAMA,UAAU,6BAA6BD,EAAMG,SACtF,uBAAGF,UAAU,2BAA2BG,KAAMJ,EAAMK,KAAML,EAAMM,OAFlE,IAE6E,0BAAML,UAAU,0BAAhB,MAF7E,IAEgI,0BAAMA,UAAU,8BAA8BD,EAAMO,M,MCyCzKC,MA3Cf,WAAgB,IAAD,EAEmBC,mBAAS,IAF5B,mBAENC,EAFM,KAEIC,EAFJ,OAGqBF,oBAAS,GAH9B,mBAGNG,EAHM,KAGKC,EAHL,KAKPC,EAAS,uCAAG,oCAAAC,EAAA,4DAEJ,qEACNC,EAAc,8CAHJ,SAKiBC,MAHrB,sEAFI,cAKVC,EALU,gBAMWA,EAAmBC,OAN9B,cAOhBC,GADIA,EANY,QAOgBC,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAO,OAAIN,MAAM,GAAD,OAAID,GAAJ,OAAkBO,EAAlB,0BAPjD,UASQC,QAAQC,IAAIL,GATpB,eASVM,EATU,iBAUGF,QAAQC,IAAIC,EAAUJ,KAAI,SAAAK,GAAQ,OAAIA,EAASR,WAVlD,eAUVS,EAVU,yBAYTA,GAZS,4CAAH,qDAyBf,OAVAC,qBAAU,WACRf,IACGgB,MAAK,SAAApB,GACJqB,YAAW,WACTpB,EAAYD,GACZG,GAAa,KACZ,UAEN,IAGD,0BAAMZ,UAAU,OACZW,GAAa,kBAAC,EAAD,MACf,yBAAKX,UAAU,0BAA0B+B,MAAO,CAC9CC,QAASrB,EAAY,EAAI,IAE3B,gEACCF,EAASwB,OAASxB,EAASY,KAAI,SAACa,EAASC,GAAV,OAAiB,kBAAC,EAAD,CAAMC,IAAKF,EAAQG,GAAI/B,GAAI4B,EAAQ5B,GAAID,MAAO6B,EAAQ7B,MAAOH,OAAQiC,EAAI,EAAG/B,IAAK8B,EAAQ9B,SAAY,QChCxIkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.267145b5.chunk.js","sourcesContent":["import React from 'react';\nimport './LoadingIcon.css';\n\nfunction LoadingIcon(props) {\n  return (\n    <div className=\"loading-icon-container\">\n      <div className=\"loading-icon\"></div>\n      <div className=\"loading-icon\"></div>\n      <div className=\"loading-icon\"></div>\n    </div>\n  );\n}\n\nexport default LoadingIcon;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Card.css';\n\nfunction Card(props) {\n  return (\n    <li className=\"card\">\n      <div className=\"card__item-number\"><span className=\"card__item-number__number\">{props.number}</span></div>\n      <a className=\"card__article-title-link\" href={props.url}>{props.title}</a> <span className=\"card__article-title-by\">by</span> <span className=\"card__article-title-author\">{props.by}</span>\n    </li>\n  );\n}\n\nCard.propTypes = {\n  number: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  by: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default Card;","import React, { useState, useEffect } from 'react';\n\nimport LoadingIcon from './components/LoadingIcon/LoadingIcon';\nimport Card from './components/Card/Card';\n\nimport './App.css';\n\nfunction App() {\n\n  const [articles, setArticles] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const fetchData = async () => {\n\n    const url = 'https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty';\n    const itemBaseUrl = 'https://hacker-news.firebaseio.com/v0/item/';\n\n    const topStoriesResponse = await fetch(url);\n    let topStoriesData = await topStoriesResponse.json();\n    topStoriesData = topStoriesData.slice(0, 20).map(storyID => fetch(`${itemBaseUrl}${storyID}.json?print=pretty`));\n\n    const responses = await Promise.all(topStoriesData)\n    const data = await Promise.all(responses.map(response => response.json()));\n\n    return data;\n  };\n\n  useEffect(() => {\n    fetchData()\n      .then(articles => {\n        setTimeout(() => {\n          setArticles(articles);\n          setIsLoading(false);\n        }, 2000);\n      });\n  }, []);\n\n  return (\n    <main className=\"app\">\n      { isLoading && <LoadingIcon /> }\n      <div className=\"app__articles-container\" style={{\n        opacity: isLoading ? 0 : 1,\n      }} >\n      <h1>Top 20 Articles from Hacker News</h1>\n      {articles.length ? articles.map((article, i) => (<Card key={article.id} by={article.by} title={article.title} number={i + 1} url={article.url} />)) : null}\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}